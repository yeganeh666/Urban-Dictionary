// Code generated by protoc-gen-go. DO NOT EDIT.
// source: urban.proto

package urban

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NameRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameRequest) Reset()         { *m = NameRequest{} }
func (m *NameRequest) String() string { return proto.CompactTextString(m) }
func (*NameRequest) ProtoMessage()    {}
func (*NameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_urban_c2212f2aaceaa484, []int{0}
}
func (m *NameRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameRequest.Unmarshal(m, b)
}
func (m *NameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameRequest.Marshal(b, m, deterministic)
}
func (dst *NameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameRequest.Merge(dst, src)
}
func (m *NameRequest) XXX_Size() int {
	return xxx_messageInfo_NameRequest.Size(m)
}
func (m *NameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NameRequest proto.InternalMessageInfo

func (m *NameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type NameResponse struct {
	Definition           string   `protobuf:"bytes,1,opt,name=Definition,proto3" json:"Definition,omitempty"`
	Example              string   `protobuf:"bytes,2,opt,name=Example,proto3" json:"Example,omitempty"`
	WrittenOn            string   `protobuf:"bytes,3,opt,name=WrittenOn,proto3" json:"WrittenOn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameResponse) Reset()         { *m = NameResponse{} }
func (m *NameResponse) String() string { return proto.CompactTextString(m) }
func (*NameResponse) ProtoMessage()    {}
func (*NameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_urban_c2212f2aaceaa484, []int{1}
}
func (m *NameResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameResponse.Unmarshal(m, b)
}
func (m *NameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameResponse.Marshal(b, m, deterministic)
}
func (dst *NameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameResponse.Merge(dst, src)
}
func (m *NameResponse) XXX_Size() int {
	return xxx_messageInfo_NameResponse.Size(m)
}
func (m *NameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NameResponse proto.InternalMessageInfo

func (m *NameResponse) GetDefinition() string {
	if m != nil {
		return m.Definition
	}
	return ""
}

func (m *NameResponse) GetExample() string {
	if m != nil {
		return m.Example
	}
	return ""
}

func (m *NameResponse) GetWrittenOn() string {
	if m != nil {
		return m.WrittenOn
	}
	return ""
}

func init() {
	proto.RegisterType((*NameRequest)(nil), "urban.NameRequest")
	proto.RegisterType((*NameResponse)(nil), "urban.NameResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UrbanDCClient is the client API for UrbanDC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UrbanDCClient interface {
	SendDefenitions(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (UrbanDC_SendDefenitionsClient, error)
}

type urbanDCClient struct {
	cc *grpc.ClientConn
}

func NewUrbanDCClient(cc *grpc.ClientConn) UrbanDCClient {
	return &urbanDCClient{cc}
}

func (c *urbanDCClient) SendDefenitions(ctx context.Context, in *NameRequest, opts ...grpc.CallOption) (UrbanDC_SendDefenitionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UrbanDC_serviceDesc.Streams[0], "/urban.UrbanDC/SendDefenitions", opts...)
	if err != nil {
		return nil, err
	}
	x := &urbanDCSendDefenitionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UrbanDC_SendDefenitionsClient interface {
	Recv() (*NameResponse, error)
	grpc.ClientStream
}

type urbanDCSendDefenitionsClient struct {
	grpc.ClientStream
}

func (x *urbanDCSendDefenitionsClient) Recv() (*NameResponse, error) {
	m := new(NameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UrbanDCServer is the server API for UrbanDC service.
type UrbanDCServer interface {
	SendDefenitions(*NameRequest, UrbanDC_SendDefenitionsServer) error
}

func RegisterUrbanDCServer(s *grpc.Server, srv UrbanDCServer) {
	s.RegisterService(&_UrbanDC_serviceDesc, srv)
}

func _UrbanDC_SendDefenitions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NameRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UrbanDCServer).SendDefenitions(m, &urbanDCSendDefenitionsServer{stream})
}

type UrbanDC_SendDefenitionsServer interface {
	Send(*NameResponse) error
	grpc.ServerStream
}

type urbanDCSendDefenitionsServer struct {
	grpc.ServerStream
}

func (x *urbanDCSendDefenitionsServer) Send(m *NameResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _UrbanDC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "urban.UrbanDC",
	HandlerType: (*UrbanDCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendDefenitions",
			Handler:       _UrbanDC_SendDefenitions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "urban.proto",
}

func init() { proto.RegisterFile("urban.proto", fileDescriptor_urban_c2212f2aaceaa484) }

var fileDescriptor_urban_c2212f2aaceaa484 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2d, 0x4a, 0x4a,
	0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0x14, 0xb9, 0xb8, 0xfd,
	0x12, 0x73, 0x53, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0x40, 0x5c,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x29, 0x8d, 0x8b, 0x07, 0xa2, 0xa4, 0xb8,
	0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x8e, 0x8b, 0xcb, 0x25, 0x35, 0x2d, 0x33, 0x2f, 0xb3, 0x24,
	0x33, 0x3f, 0x0f, 0xaa, 0x12, 0x49, 0x44, 0x48, 0x82, 0x8b, 0xdd, 0xb5, 0x22, 0x31, 0xb7, 0x20,
	0x27, 0x55, 0x82, 0x09, 0x2c, 0x09, 0xe3, 0x0a, 0xc9, 0x70, 0x71, 0x86, 0x17, 0x65, 0x96, 0x94,
	0xa4, 0xe6, 0xf9, 0xe7, 0x49, 0x30, 0x83, 0xe5, 0x10, 0x02, 0x46, 0x9e, 0x5c, 0xec, 0xa1, 0x20,
	0x37, 0xb9, 0x38, 0x0b, 0xd9, 0x71, 0xf1, 0x07, 0xa7, 0xe6, 0xa5, 0xb8, 0xa4, 0xa6, 0xa5, 0x42,
	0x0c, 0x2d, 0x16, 0x12, 0xd2, 0x83, 0xb8, 0x1e, 0xc9, 0xb5, 0x52, 0xc2, 0x28, 0x62, 0x10, 0xe7,
	0x29, 0x31, 0x18, 0x30, 0x26, 0xb1, 0x81, 0xfd, 0x68, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xc3,
	0x7c, 0xaf, 0x23, 0xf2, 0x00, 0x00, 0x00,
}
